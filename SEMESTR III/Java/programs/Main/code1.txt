IMPORT JAvA.IO.FILE;
IMPORT JAvA.IO.FILEINPUTSTREAM;
IMPORT JAvA.IO.FILEOUTPUTSTREAM;
IMPORT JAvA.IO.IOExCEPTION;
IMPORT JAvA.UTIL.LIST;
IMPORT JAvA.UTIL.VECTOR;
IMPORT JAvA.UTIL.ZIP.ZIPENTRy;
IMPORT JAvA.UTIL.ZIP.ZIPINPUTSTREAM;


PUBLIC CLASS DECOMPRESION {

    LIST<STRING> FILELIST;

    PUBLIC vOID READCODE(FILE FILE) THROWS IOExCEPTION {

        UNZIPIT(FILE.GETNAME(), FILE.GETNAME());
    }

    PUBLIC vOID UNZIPIT(STRING ZIPFILE, STRING OUTPUTFOLDER) {

        ByTE[] BUFFER = NEW ByTE[1024];

        TRy {

            FILE FOLDER = NEW FILE(OUTPUTFOLDER);
            IF (!FOLDER.ExISTS()) {
                FOLDER.MKDIR();
            }

            ZIPINPUTSTREAM ZIS = NEW ZIPINPUTSTREAM(NEW FILEINPUTSTREAM(ZIPFILE));
            ZIPENTRy ZE = ZIS.GETNExTENTRy();

            WHILE (ZE != NULL) {

                STRING FILENAME = ZE.GETNAME();
                FILE NEWFILE = NEW FILE(OUTPUTFOLDER + FILE.SEPARATOR + FILENAME);

                NEW FILE(NEWFILE.GETPARENT()).MKDIRS();

                FILEOUTPUTSTREAM FOS = NEW FILEOUTPUTSTREAM(NEWFILE);

                INT LEN;
                WHILE ((LEN = ZIS.READ(BUFFER)) > 0) {
                    FOS.WRITE(BUFFER, 0, LEN);
                }

                FOS.CLOSE();
                ZE = ZIS.GETNExTENTRy();
            }

            ZIS.CLOSEENTRy();
            ZIS.CLOSE();

        } CATCH (IOExCEPTION Ex) {
            Ex.PRINTSTACKTRACE();
        }
    }
}
